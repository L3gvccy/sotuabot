const { ActionRowBuilder, SelectMenuBuilder, ButtonBuilder, ButtonStyle, PermissionFlagsBits, ChannelType, EmbedBuilder} = require('discord.js')
const cfg = require('../../config.json')
const tool = require('../../tools')

module.exports = {
    name: 'interactionCreate',

    async execute(interaction, client) {
        if(interaction.isStringSelectMenu()) {
            if(interaction.customId !== 'create_ticket') return

            let _name;
            await interaction.deferReply({
                ephemeral: true
            })
            const embed = new EmbedBuilder()
                .setTitle('Ticket!')
                .setColor(cfg.color.orange)
                .setTimestamp()
                .setDescription('**–í–∏ –≤—ñ–¥–∫—Ä–∏–ª–∏ –¢—ñ–∫–µ—Ç!**\n –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –≤—Å–µ, —â–æ –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∏–∂—á–µ, —Ç–∞ –∑–∞—á–µ–∫–∞–π—Ç–µ, –ø–æ–∫–∏ –≤–∞–º –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è!')  
            const buttons = new ActionRowBuilder(); 
                buttons.addComponents(
                    new ButtonBuilder().setLabel('–í–∏–¥–∞–ª–∏—Ç–∏').setCustomId(`inticked-delete`).setEmoji('üóëÔ∏è').setStyle(ButtonStyle.Danger),
                    new ButtonBuilder().setLabel('–ó–∞–∫—Ä–∏—Ç–∏').setCustomId(`inticked-close`).setEmoji('üìë').setStyle(ButtonStyle.Secondary),
                )
            const perms = [
                {
                    id: interaction.guild.id,
                    deny: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages]
                },
                {
                    id: interaction.guild.roles.cache.get(cfg.roles.admin),
                    allow: [PermissionFlagsBits.ViewChannel, [PermissionFlagsBits.SendMessages]]
                },
                {
                    id: interaction.user.id,
                    allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages]
                }
            ];
            switch (interaction.values[0])
            {
                case "ticket_propos":
                    _name = `üí°ticket-‚Ññ${interaction.user.id}`;
                break;
                case "ticket_pen":
                    _name = `üôãticket-‚Ññ${interaction.user.id}`;
                break;
                case "ticket_role":
                    _name = `üé≠ticket-‚Ññ${interaction.user.id}`;             
                break;
                case "ticket_prvoice":
                    _name = `üîäticket-‚Ññ${interaction.user.id}`;
                break;
                case "ticket_raid":
                    _name = `üè¥ticket-‚Ññ${interaction.user.id}`;
                    perms[3] = {
                        id: interaction.guild.roles.cache.get(cfg.roles.raid_leader),
                        allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages]
                    }
                    buttons.addComponents(
                        new ButtonBuilder().setLabel('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏').setCustomId(`inticked-conf-${interaction.user.id}`).setEmoji('1054099604393705512').setStyle(ButtonStyle.Primary),
                    )
                break;
            }
            const _chnl = client.channels.cache.find(chnl => chnl.name === _name);
            if(_chnl)
            {
                if(_chnl.permissionsFor(interaction.user.id).has(PermissionFlagsBits.ViewChannel) && _chnl.permissionsFor(interaction.user.id).has(PermissionFlagsBits.SendMessages))
                {
                    interaction.editReply({
                        content: `–í–∏ –≤–∂–µ –º–∞—î—Ç–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —Ç—ñ–∫–µ—Ç ${_chnl}!`,
                    });
                    return;
                }
                embed.setDescription('**–í–∏ –≤—ñ–¥–∫—Ä–∏–ª–∏ –≤–∞—à –º–∏–Ω—É–ª–∏–π –¢—ñ–∫–µ—Ç!**\n –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ —Ü–µ–π —Ç—ñ–∫–µ—Ç, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —É –≤–∞—Å –∑–æ–≤—Å—ñ–º —ñ–Ω—à–∞ —Ç–µ–º–∞.')  
                interaction.editReply({
                    content: `–¢—ñ–∫–µ—Ç ${_chnl} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–æ! \n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à—ñ –∫–∞–Ω–∞–ª–∏!`,
                });
                await _chnl.permissionOverwrites.set(perms);
                _chnl.send({
                    content: `${interaction.user}`,
                    embeds: [embed],
                    components: [buttons] 
                })
                return;
            }
            
            interaction.guild.channels.create({
                name: _name,
                type: ChannelType.GuildText,
                parent: cfg.cat.ticket,
                permissionOverwrites: perms
            }).then(async channel => {
                if (interaction.values[0] === 'ticket_role') {
                    embed.setDescription(`**–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ—ó —Ä–æ–ª—ñ –≤–∏ –º–∞—î—Ç–µ:**\n- –ü—Ä–∏–≤'—è–∑–∞—Ç–∏ XBox –∞–∫–∞—É–Ω—Ç –¥–æ –¥—ñ—Å–∫–æ—Ä–¥—É\n- –ù–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–æ–ª—ñ, —è–∫—É —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏.\n- –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏, –¥–µ –≤–∏–¥–Ω–æ –Ω—ñ–∫–Ω–µ–π–º —ñ –≤–∏–∫–æ–Ω–∞–Ω—ñ —É–º–æ–≤–∏ –∑–∞–¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó —Ä–æ–ª—ñ\n\n_–ü–æ–≤–Ω–∏–π –ø–µ—Ä–µ–ª—ñ–∫ —Ä–æ–ª–µ–π –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ –≤_ <#986950920862597171>`)
                }

                channel.send({
                    content: `${interaction.user}`,
                    embeds: [embed],
                    components: [buttons] 
                })
                
                

                await interaction.editReply({
                    content: `–¢—ñ–∫–µ—Ç ${channel} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! \n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à—ñ –∫–∞–Ω–∞–ª–∏!`
                });
                return;
            })
            
        } else if(interaction.isButton()) {
            const char = interaction.customId.split('-')
            if (char[0] && char[0] !== 'inticked') return;
            await interaction.deferReply({ephemeral: true})
            switch (char[1]) {
                case 'delete':
                    if(!tool.isadmin(interaction.member)) return interaction.editReply({content: `> –õ–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç—ñ–∫–µ—Ç`})
                    await interaction.channel.delete()
                    break;
                case 'close':
                    const embed = new EmbedBuilder()
                .setTitle("Ticket!")
                .setDescription(`_–¢—ñ–∫–µ—Ç –±—É–≤ –∑–∞–∫—Ä–∏—Ç–∏–π by **${interaction.user.username}**!_`)
                .setColor(`#ffae00`)
                .setTimestamp();
                interaction.channel.permissionOverwrites.set([
                {
                    id: interaction.guild.id,
                    deny: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages]
                },
                {
                    id: interaction.guild.roles.cache.get(cfg.roles.admin),
                    allow: [PermissionFlagsBits.ViewChannel],
                    deny: [PermissionFlagsBits.SendMessages]
                }])
                interaction.channel.send({
                    embeds: [embed]
                })
                await interaction.editReply({content: `> –¢—ñ–∫–µ—Ç –±—É–ª–æ –∑–∞–∫—Ä–∏—Ç–æ`});
                break;
                case 'conf':
                    
                    if (!tool.isadmin(interaction.member) && !tool.israidleader(interaction.member)) {
                        return interaction.editReply({content: cfg.phrases.missingperms})
                    }

                    const raidlog = client.channels.cache.get(cfg.channels.raid_log);
                    const raider = interaction.guild.roles.cache.get(cfg.roles.raider);

                    
                    const target = await interaction.guild.members.fetch(char[2])
                    const t_user = target.user
                    if (target.roles.cache.has(cfg.roles.raid_block)) {
                        return interaction.editReply({content: `> –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞—Ç–∏ —Ä–æ–ª—å —É –∑–≤'—è–∑–∫—É –∑ –∑–∞–±–æ—Ä–æ–Ω–æ—é —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞`})
                    }
                    if (target.roles.cache.has(cfg.roles.raider)) {
                        return interaction.editReply({content: `> –¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î –∫–∞–ø–µ—Ä—Å—Ç–≤–æ`})
                    }

                    const embedraid = new EmbedBuilder()
                    .setColor(cfg.color.blue)
                    .setTitle('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è —Ä–µ–π–¥–µ—Ä—ñ–≤ üè¥‚Äç‚ò†Ô∏è')
                    .setDescription(`${t_user} _(${t_user.username})_ –æ—Ç—Ä–∏–º–∞–≤ —Ä–æ–ª—å —Ä–µ–π–¥–µ—Ä–∞!
                    **By:** ${interaction.user}`)
                    .setImage(cfg.image.embedbar)
                    .setTimestamp()
                    
                    await target.roles.add(raider)

                    const finalembed = new EmbedBuilder()
                    .setColor('#990099')
                    .setTitle('–í—ñ—Ç–∞—î–º–æ –∑ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è–º –∫–∞–ø–µ—Ä—Å—Ç–≤–∞!')
                    .setDescription(`–ù–µ –∑–∞–±—É–¥—å –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ <#986961953614364712>!`)
                    .setFooter({iconURL: `${interaction.user.displayAvatarURL()}`, text: `${interaction.user.username}`})
                    .setTimestamp()
                    await interaction.channel.send({embeds: [finalembed]})
                    await raidlog.send({embeds: [embedraid]})
                    await interaction.editReply({content: `> –î—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!`})
                break;
            
            }
        } else return
    }
}